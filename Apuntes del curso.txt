Comando basicos

	git config --global init.defaultBranch main

	git branch -m main renombrar la rama

	git config --global user.name "Nombre usuario"

	git config --global user.email "Coreo@correo.com"

	git confing --list

	git status

	git add nombreArchivo

	git rm --catched nombreArchivo

	git add .

	Git log -> Bitacora de cambios


Manejo de Ramas
	
	Ver el listado de rams
		git branch
	
	Crear una rama nueva
		git checkout -b amin
	
	Cambio entre Ramas
		git checkout main 
		git switch main
		
	Fusionar ramas
		*Primero debemos posisionarnos en la rama principal y en el siguiente comando indicar la rama que queremos fusionar
		git merge nombreRamaAFusionar
		
	Eliminar una rama	
		git branch -D NombreRama
		Nota: antes de eliminar la rama verifica que ya estes en otra, de lo contrario dara un error.
		
	
	
	git revert "hash del commit": Crea un nuevo commit que deshace los cambios de un commit específico. Es útil para deshacer cambios de forma segura en repositorios compartidos.
	
	git reset --soft: Mueve HEAD al commit especificado, pero mantiene los cambios en el área de preparación.
	git reset --mixed: (Por defecto) Mueve HEAD y deshace los cambios en el área de preparación, pero mantiene los cambios en el directorio de trabajo.
	git reset --hard: Mueve HEAD y descarta todos los cambios, tanto en el área de preparación como en el directorio de trabajo.
	
	
Git Tag
	Permite poner una etiqueta indicadora
		ejemplo: git tag -a v1.0 -m "Primera versión".
	
	git tag -> permite ver la lista tags (etiquetas)

	git show "Tag" -> muestra mas información de la etiqueta.
	
	git tag -d "tag" -> Elina la etiqueta de los commits, sin alterar los commits
	
	
	
git checkout "Hash del commit"
	Tambien te permite evaluar el status de una rama antes de integrarlo.
	

Resolución de conflcitos
	Se crea archivo en main
	se crea rama developer
		se crea linea y se hace commit
	se regresa a la rama min
		se modifica la misma linea y se hace commit
	se hace merge con la nueva rama
		si se marco el conflicto se abre el archivo y se corrige
		Se hace commit y se intenta de nuevo el merge


Forks y Estrellas
	
Comandos para github
	
	git push
		Sube los cambios al repositorio Remoto (GitHub).
	
	git pull
		Baja cambios de la Rama de Origen.
		* No puedes hacer un Push si tu rama local no esta sincronizada con el Repositorio Remoto.
	
	
	
	git fetch
		Baja los cambios pero no los integra de inmediato al repositorio local.
		con este comando podemos ver comparar la rama local con la remota.
			git log {RamaLocla}..origin/{RamaRemota}
		Si confirmamos que los cambios son correctos procedemos a hacer un git merge origin/{RamaRemota}
		
		
 Issues en GitHub
	Deinier una plantilla:
		crear esta estructura de carpetas:(.github\ISSUE_TEMPLATE)
			agregar el archivo bug_report.md
				Dentro del archivo podemos configurar la plantilla.

	Nota: El titulo y la descripción son los datos mas importantes de una Issue.
	
	
CodeReview
	El primer paso es verificiar que tengamos actualizado la rama local
	Seguidamente crear una rama secundaria donde haremos los cambios.
	
	Al finalizar debemos hacer subir los cambios a github con el siguiente comando:
	git push -u origin developer_01

	En github debemos crear el pull request y esperar que nuestros compañeros validen.
	

GitHub Projects
	Crear un proyecto segun las necesidades, existen muchas plantillas
	Crear la actividad (Add Item, esto normalmente se hace en la sección de ToDo.) y asignarla a algun colaborador, 
	Normalamente tendra la leyenda draft esto quiere decir que no esta vinculado a ningun repositorio
	Para corregir esto debemos posisionarnos sobre la actividad dar click a los tres puntos y elegir, convertirla en issue, en este paso nos permitira asignat el repo.
	
	Si creamos el pull request desde la issue, debemmos ejecutar los siguientes comandos en local:
	git fetch origin
	git checkout {Nombre de la rama que creamos en github}mchan/8
	
	Nota:
	GitHub project te permite trabajar con varios repositorios simultaneamente.
	
	
Uso de GitHub Gist para Compartir y Revisar Código Colaborativo



Creación y Publicación de Sitios Web con GitHub Pages



Creación y Gestión de GitHub Codespaces en la Nube



Programación Colaborativa con Live Share en VS Code



Gestión de GitHub Tokens para Acceso Seguro a Repositorios



Mitigación de Brechas de Seguridad en Repositorios GitHub
	Secret scanning: scannea que no se suba información delicada como accesos a apis o base de datos.
	esto alertara en github cuando subamos este tipo de datos por error.
	
	utilizar git ignore para evitar subir información delicada.
	
	
Gestión de Seguridad de Paquetes con Dependabot en Proyectos .NET
	Se debe habilitat en settings
	
	
Configuración de Repositorios Privados en GitHub
	Git ignore
		*.sln	-> Archivos de proyecto
		/bin	-> carpeta
		/obj	-> carpeta
		
	en git hay un proyecto que se llama git ignore y hay ejemplo de diferentes proyectos
	
		